package com.karaoke.ui;

import com.karaoke.dao.LoaiPhongDAO;
import com.karaoke.dao.PhongDAO;
import com.karaoke.model.LoaiPhong;
import com.karaoke.model.Phong;
import java.awt.Color;
import java.awt.Font;
import java.awt.CardLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Thanh
 */
public class QLPhongJPanel extends javax.swing.JPanel {

    int indexPHONG = -1, indexLOAI = -1;
    boolean check;
    ResultSet rs = null;
    List<Phong> listphong = new PhongDAO().select();
    List<LoaiPhong> listloai = new LoaiPhongDAO().select();

    public QLPhongJPanel() {
        initComponents();
        ((CardLayout) pnlMain.getLayout()).show(pnlMain, "loaiphong");
        customJTable(tblPHONG);
        customJTable(tblLOAI);
        fillToTableLOAI();
        fillToTablePHONG();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        pnlPhong = new javax.swing.JPanel();
        pnlThongtin = new javax.swing.JPanel();
        lblMaPhong = new javax.swing.JLabel();
        txtMaPhong = new javax.swing.JTextField();
        lblLoai = new javax.swing.JLabel();
        cboLoai = new javax.swing.JComboBox<>();
        scrTable = new javax.swing.JScrollPane();
        tblPHONG = new javax.swing.JTable();
        pnlButtons = new javax.swing.JPanel();
        lblNewPHONG = new javax.swing.JLabel();
        lblTHEMPHONG = new javax.swing.JLabel();
        pnlLoaiPhong = new javax.swing.JPanel();
        pnlThongtin2 = new javax.swing.JPanel();
        lblMaLoaiPhong = new javax.swing.JLabel();
        txtMaLoaiPhong = new javax.swing.JTextField();
        txtTenLoaiPhong = new javax.swing.JTextField();
        lblTenLoaiPhong = new javax.swing.JLabel();
        lblGiaPhong = new javax.swing.JLabel();
        txtGiaPhong = new javax.swing.JTextField();
        scrTable2 = new javax.swing.JScrollPane();
        tblLOAI = new javax.swing.JTable();
        pnlButtons2 = new javax.swing.JPanel();
        lblNewLOAI = new javax.swing.JLabel();
        lblTHEMLOAI = new javax.swing.JLabel();
        pnlSubmenu = new javax.swing.JPanel();
        lblLoaiPhong = new javax.swing.JLabel();
        lblPhong = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(1050, 690));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1050, 690));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlMain.setOpaque(false);
        pnlMain.setLayout(new java.awt.CardLayout());

        pnlPhong.setBackground(new java.awt.Color(0, 0, 0));
        pnlPhong.setMinimumSize(new java.awt.Dimension(1050, 690));
        pnlPhong.setOpaque(false);
        pnlPhong.setPreferredSize(new java.awt.Dimension(1050, 690));
        pnlPhong.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlThongtin.setBackground(new java.awt.Color(204, 204, 255));
        pnlThongtin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin phòng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 3, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        pnlThongtin.setForeground(new java.awt.Color(204, 255, 255));
        pnlThongtin.setOpaque(false);
        pnlThongtin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMaPhong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMaPhong.setForeground(new java.awt.Color(255, 255, 255));
        lblMaPhong.setText("Mã phòng");
        pnlThongtin.add(lblMaPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, -1, 30));

        txtMaPhong.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtMaPhong.setForeground(new java.awt.Color(102, 0, 0));
        pnlThongtin.add(txtMaPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 200, 30));

        lblLoai.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLoai.setForeground(new java.awt.Color(255, 255, 255));
        lblLoai.setText("Loại phòng");
        pnlThongtin.add(lblLoai, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, 30));

        cboLoai.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        pnlThongtin.add(cboLoai, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 200, 30));

        pnlPhong.add(pnlThongtin, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 560, 200));

        tblPHONG.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        tblPHONG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã phòng", "Loại phòng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPHONG.setGridColor(new java.awt.Color(255, 255, 255));
        tblPHONG.setRowHeight(30);
        tblPHONG.setSelectionBackground(new java.awt.Color(204, 204, 255));
        tblPHONG.setSelectionForeground(new java.awt.Color(0, 0, 204));
        tblPHONG.setShowHorizontalLines(false);
        tblPHONG.setShowVerticalLines(false);
        tblPHONG.getTableHeader().setReorderingAllowed(false);
        tblPHONG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPHONGMouseClicked(evt);
            }
        });
        scrTable.setViewportView(tblPHONG);
        if (tblPHONG.getColumnModel().getColumnCount() > 0) {
            tblPHONG.getColumnModel().getColumn(0).setMinWidth(50);
            tblPHONG.getColumnModel().getColumn(0).setMaxWidth(50);
            tblPHONG.getColumnModel().getColumn(1).setResizable(false);
        }

        pnlPhong.add(scrTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 560, 220));

        pnlButtons.setMaximumSize(new java.awt.Dimension(400, 60));
        pnlButtons.setMinimumSize(new java.awt.Dimension(400, 60));
        pnlButtons.setOpaque(false);
        pnlButtons.setPreferredSize(new java.awt.Dimension(400, 60));
        pnlButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        lblNewPHONG.setBackground(new java.awt.Color(0, 102, 0));
        lblNewPHONG.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNewPHONG.setForeground(new java.awt.Color(255, 255, 255));
        lblNewPHONG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewPHONG.setText("NHẬP MỚI");
        lblNewPHONG.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblNewPHONG.setOpaque(true);
        lblNewPHONG.setPreferredSize(new java.awt.Dimension(120, 40));
        lblNewPHONG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblNewPHONGMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblNewPHONGMouseExited(evt);
            }
        });
        pnlButtons.add(lblNewPHONG);

        lblTHEMPHONG.setBackground(new java.awt.Color(0, 102, 0));
        lblTHEMPHONG.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTHEMPHONG.setForeground(new java.awt.Color(255, 255, 255));
        lblTHEMPHONG.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTHEMPHONG.setText("THÊM");
        lblTHEMPHONG.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblTHEMPHONG.setOpaque(true);
        lblTHEMPHONG.setPreferredSize(new java.awt.Dimension(120, 40));
        lblTHEMPHONG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblTHEMPHONGMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblTHEMPHONGMouseExited(evt);
            }
        });
        pnlButtons.add(lblTHEMPHONG);

        pnlPhong.add(pnlButtons, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 570, -1, -1));

        pnlMain.add(pnlPhong, "phong");

        pnlLoaiPhong.setBackground(new java.awt.Color(0, 0, 0));
        pnlLoaiPhong.setMinimumSize(new java.awt.Dimension(1050, 690));
        pnlLoaiPhong.setName(""); // NOI18N
        pnlLoaiPhong.setOpaque(false);
        pnlLoaiPhong.setPreferredSize(new java.awt.Dimension(1050, 690));
        pnlLoaiPhong.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlThongtin2.setBackground(new java.awt.Color(204, 204, 255));
        pnlThongtin2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin Loại phòng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 3, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        pnlThongtin2.setForeground(new java.awt.Color(204, 255, 255));
        pnlThongtin2.setOpaque(false);
        pnlThongtin2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMaLoaiPhong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMaLoaiPhong.setForeground(new java.awt.Color(255, 255, 255));
        lblMaLoaiPhong.setText("Mã Loại phòng");
        pnlThongtin2.add(lblMaLoaiPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, -1, 30));

        txtMaLoaiPhong.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtMaLoaiPhong.setForeground(new java.awt.Color(102, 0, 0));
        pnlThongtin2.add(txtMaLoaiPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 200, 30));

        txtTenLoaiPhong.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtTenLoaiPhong.setForeground(new java.awt.Color(102, 0, 0));
        pnlThongtin2.add(txtTenLoaiPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 200, 30));

        lblTenLoaiPhong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTenLoaiPhong.setForeground(new java.awt.Color(255, 255, 255));
        lblTenLoaiPhong.setText("Tên Loại phòng");
        pnlThongtin2.add(lblTenLoaiPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, -1, 30));

        lblGiaPhong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblGiaPhong.setForeground(new java.awt.Color(255, 255, 255));
        lblGiaPhong.setText("Giá phòng");
        pnlThongtin2.add(lblGiaPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, -1, 30));

        txtGiaPhong.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        txtGiaPhong.setForeground(new java.awt.Color(102, 0, 0));
        pnlThongtin2.add(txtGiaPhong, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 130, 200, 30));

        pnlLoaiPhong.add(pnlThongtin2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 560, 200));

        tblLOAI.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        tblLOAI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã Loại phòng", "Tên Loại phòng", "Giá phòng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLOAI.setGridColor(new java.awt.Color(255, 255, 255));
        tblLOAI.setRowHeight(30);
        tblLOAI.setSelectionBackground(new java.awt.Color(204, 204, 255));
        tblLOAI.setSelectionForeground(new java.awt.Color(0, 0, 204));
        tblLOAI.setShowHorizontalLines(false);
        tblLOAI.setShowVerticalLines(false);
        tblLOAI.getTableHeader().setReorderingAllowed(false);
        tblLOAI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLOAIMouseClicked(evt);
            }
        });
        scrTable2.setViewportView(tblLOAI);
        if (tblLOAI.getColumnModel().getColumnCount() > 0) {
            tblLOAI.getColumnModel().getColumn(0).setMinWidth(50);
            tblLOAI.getColumnModel().getColumn(0).setMaxWidth(50);
            tblLOAI.getColumnModel().getColumn(1).setResizable(false);
            tblLOAI.getColumnModel().getColumn(2).setResizable(false);
            tblLOAI.getColumnModel().getColumn(3).setResizable(false);
        }

        pnlLoaiPhong.add(scrTable2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 560, 220));

        pnlButtons2.setMaximumSize(new java.awt.Dimension(400, 60));
        pnlButtons2.setMinimumSize(new java.awt.Dimension(400, 60));
        pnlButtons2.setOpaque(false);
        pnlButtons2.setPreferredSize(new java.awt.Dimension(400, 60));
        pnlButtons2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        lblNewLOAI.setBackground(new java.awt.Color(0, 102, 0));
        lblNewLOAI.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNewLOAI.setForeground(new java.awt.Color(255, 255, 255));
        lblNewLOAI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewLOAI.setText("NHẬP MỚI");
        lblNewLOAI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblNewLOAI.setOpaque(true);
        lblNewLOAI.setPreferredSize(new java.awt.Dimension(120, 40));
        lblNewLOAI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblNewLOAIMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblNewLOAIMouseExited(evt);
            }
        });
        pnlButtons2.add(lblNewLOAI);

        lblTHEMLOAI.setBackground(new java.awt.Color(0, 102, 0));
        lblTHEMLOAI.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTHEMLOAI.setForeground(new java.awt.Color(255, 255, 255));
        lblTHEMLOAI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTHEMLOAI.setText("THÊM");
        lblTHEMLOAI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblTHEMLOAI.setOpaque(true);
        lblTHEMLOAI.setPreferredSize(new java.awt.Dimension(120, 40));
        lblTHEMLOAI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblTHEMLOAIMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblTHEMLOAIMouseExited(evt);
            }
        });
        pnlButtons2.add(lblTHEMLOAI);

        pnlLoaiPhong.add(pnlButtons2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 570, -1, -1));

        pnlMain.add(pnlLoaiPhong, "loaiphong");

        add(pnlMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1050, 650));

        pnlSubmenu.setOpaque(false);
        pnlSubmenu.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        lblLoaiPhong.setBackground(new java.awt.Color(255, 255, 255));
        lblLoaiPhong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLoaiPhong.setForeground(new java.awt.Color(0, 0, 204));
        lblLoaiPhong.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoaiPhong.setText("QUẢN LÝ LOẠI PHÒNG");
        lblLoaiPhong.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblLoaiPhong.setMaximumSize(new java.awt.Dimension(190, 20));
        lblLoaiPhong.setMinimumSize(new java.awt.Dimension(190, 20));
        lblLoaiPhong.setOpaque(true);
        lblLoaiPhong.setPreferredSize(new java.awt.Dimension(190, 20));
        lblLoaiPhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLoaiPhongMouseClicked(evt);
            }
        });
        pnlSubmenu.add(lblLoaiPhong);

        lblPhong.setBackground(new java.awt.Color(0, 0, 204));
        lblPhong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPhong.setForeground(new java.awt.Color(255, 255, 255));
        lblPhong.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhong.setText("QUẢN LÝ PHÒNG");
        lblPhong.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblPhong.setMaximumSize(new java.awt.Dimension(190, 20));
        lblPhong.setMinimumSize(new java.awt.Dimension(190, 20));
        lblPhong.setOpaque(true);
        lblPhong.setPreferredSize(new java.awt.Dimension(190, 20));
        lblPhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPhongMouseClicked(evt);
            }
        });
        pnlSubmenu.add(lblPhong);

        add(pnlSubmenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void tblPHONGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPHONGMouseClicked
        // TODO add your handling code here:
        showDetailPHONG();

    }//GEN-LAST:event_tblPHONGMouseClicked

    private void lblNewPHONGMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewPHONGMouseEntered
        // TODO add your handling code here:
        lblNewPHONG.setBackground(Color.WHITE);
        lblNewPHONG.setForeground(new Color(0, 102, 0));
    }//GEN-LAST:event_lblNewPHONGMouseEntered

    private void lblNewPHONGMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewPHONGMouseExited
        // TODO add your handling code here:
        lblNewPHONG.setBackground(new Color(0, 102, 0));
        lblNewPHONG.setForeground(Color.WHITE);
    }//GEN-LAST:event_lblNewPHONGMouseExited

    private void lblTHEMPHONGMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTHEMPHONGMouseEntered
        // TODO add your handling code here:
        lblTHEMPHONG.setBackground(Color.WHITE);
        lblTHEMPHONG.setForeground(new Color(0, 102, 0));
    }//GEN-LAST:event_lblTHEMPHONGMouseEntered

    private void lblTHEMPHONGMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTHEMPHONGMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_lblTHEMPHONGMouseExited

    private void lblTHEMLOAIMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTHEMLOAIMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_lblTHEMLOAIMouseExited

    private void lblTHEMLOAIMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTHEMLOAIMouseEntered
        // TODO add your handling code here:
        lblTHEMLOAI.setBackground(Color.WHITE);
        lblTHEMLOAI.setForeground(new Color(0, 102, 0));
    }//GEN-LAST:event_lblTHEMLOAIMouseEntered

    private void lblNewLOAIMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewLOAIMouseExited
        // TODO add your handling code here:
        lblNewLOAI.setBackground(new Color(0, 102, 0));
        lblNewLOAI.setForeground(Color.WHITE);
    }//GEN-LAST:event_lblNewLOAIMouseExited

    private void lblNewLOAIMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNewLOAIMouseEntered
        // TODO add your handling code here:
        lblNewLOAI.setBackground(Color.WHITE);
        lblNewLOAI.setForeground(new Color(0, 102, 0));
    }//GEN-LAST:event_lblNewLOAIMouseEntered

    private void tblLOAIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLOAIMouseClicked
        // TODO add your handling code here:
        lblTHEMPHONG.setBackground(new Color(0, 102, 0));
        lblTHEMPHONG.setForeground(Color.WHITE);
        showDetailLOAI();
    }//GEN-LAST:event_tblLOAIMouseClicked

    private void lblPhongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhongMouseClicked
        // TODO add your handling code here:
        lblPhong.setForeground(new Color(0, 0, 204));
        lblPhong.setBackground(new Color(255, 255, 255));
        lblLoaiPhong.setBackground(new Color(0, 0, 204));
        lblLoaiPhong.setForeground(new Color(255, 255, 255));
        ((CardLayout) pnlMain.getLayout()).show(pnlMain, "phong");
    }//GEN-LAST:event_lblPhongMouseClicked

    private void lblLoaiPhongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLoaiPhongMouseClicked
        // TODO add your handling code here:
        lblPhong.setBackground(new Color(0, 0, 204));
        lblPhong.setForeground(new Color(255, 255, 255));
        lblLoaiPhong.setForeground(new Color(0, 0, 204));
        lblLoaiPhong.setBackground(new Color(255, 255, 255));
        ((CardLayout) pnlMain.getLayout()).show(pnlMain, "loaiphong");
    }//GEN-LAST:event_lblLoaiPhongMouseClicked

    private void customJTable(JTable tbl) {
        tbl.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 13));
        tbl.setFont(new Font("Tahoma", Font.PLAIN, 11));
        tbl.getTableHeader().setOpaque(false);
        tbl.getTableHeader().setBackground(new Color(0, 0, 0));
        tbl.getTableHeader().setForeground(new Color(255, 255, 255));
        tbl.setRowHeight(30);
    }
    private void fillCboLoai() {
        cboLoai.removeAllItems();
        listloai = new LoaiPhongDAO().select();
        for (LoaiPhong loai : listloai) {
            cboLoai.addItem(loai.getTenLoai());
        }
        cboLoai.setSelectedIndex(-1);
    }

    private void fillToTablePHONG() {
        DefaultTableModel table = (DefaultTableModel) tblPHONG.getModel();
        table.setRowCount(0);
        listphong = new PhongDAO().select();
        int count = 0;
        for (Phong phong : listphong) {
            count++;
            String loai = "";
            for (int i = 0; i < listloai.size(); i++) {
                if (phong.getMaLoai().equals(listloai.get(i).getMaLoai())) {
                    loai = listloai.get(i).getTenLoai();
                }

            }
            Object[] row = new Object[]{count, phong.getMaPhong(), loai};
            table.addRow(row);
        }
    }

    private void fillToTableLOAI() {
        DefaultTableModel table = (DefaultTableModel) tblLOAI.getModel();
        table.setRowCount(0);
        listloai = new LoaiPhongDAO().select();
        int count = 0;
        for (LoaiPhong loai : listloai) {
            count++;
            Object[] row = new Object[]{count, loai.getMaLoai(), loai.getTenLoai(), loai.getGiaPhong()};
            table.addRow(row);
        }
    }

    private void showDetailPHONG() {
        txtMaPhong.setText(tblPHONG.getValueAt(indexPHONG, 1) + "");
        cboLoai.setSelectedItem(tblPHONG.getValueAt(indexPHONG, 2));

    }

    private void showDetailLOAI() {
        txtMaLoaiPhong.setText(tblLOAI.getValueAt(indexLOAI, 1) + "");
        txtTenLoaiPhong.setText(tblLOAI.getValueAt(indexLOAI, 2) + "");
        txtGiaPhong.setText(tblLOAI.getValueAt(indexLOAI, 3) + "");
//        if (txtMaLoai.getText().equals("VIP") || txtMaLoai.getText().equals("NORMAL")) {
//            btnXoaLOAI.setEnabled(false);
//        } else {
//            btnXoaLOAI.setEnabled(true);
//        }

    }

    private void clearPHONG() {
        indexPHONG = -1;
        tblPHONG.clearSelection();
        txtMaPhong.setText("");
        cboLoai.setSelectedIndex(-1);
        lblTHEMPHONG.setText("Thêm");
    }

    private void clearLOAI() {
        indexLOAI = -1;
        tblLOAI.clearSelection();
        txtMaLoaiPhong.setText("");
        txtTenLoaiPhong.setText("");
        txtGiaPhong.setText("");
        lblTHEMLOAI.setText("Thêm");
    }

//    private boolean checkInputPhong() throws SQLException {
//        if (txtMaPhong.getText().trim().equals("")) {
//            XuLy.popup("loi", this, "Chưa nhập mã phòng", "LỖI");
//            txtMaPhong.requestFocus();
//            return false;
//        }
//        if (txtMaPhong.getText().length() > 10) {
//            XuLy.popup("loi", this, "Mã phòng tối đa 10 kí tự", "LỖI");
//            txtMaPhong.requestFocus();
//            return false;
//        }
//        if (btnThemPHONG.getText().equals("Thêm")) {
//            rs = JDBCHelper.executeQuery("SELECT * FROM Phong WHERE maPhong = ?", txtMaPhong.getText());
//            if (rs.next()) {
//                XuLy.popup("loi", this, "Đã tồn tại mã phòng " + txtMaPhong.getText(), "LỖI");
//                txtMaPhong.requestFocus();
//                return false;
//            }
//        }
//        if (btnThemPHONG.getText().equals("Cập nhật")) { //Kiểm tra tồn tại username (Loại trường hợp không thay đổi username
//            rs = JDBCHelper.executeQuery("SELECT * FROM Phong");
//            while (rs.next()) {
//                if (rs.getString("maPhong").equals(txtMaPhong.getText()) && !tblRoom.getValueAt(indexPHONG, 1).toString().equals(txtMaPhong.getText())) {
//                    XuLy.popup("loi", this, "Đã tồn tại mã phòng " + txtMaPhong.getText(), "LỖI");
//                    txtMaPhong.requestFocus();
//                    return false;
//                }
//            }
//        }
//        return true;
//    }

//    private void addPhong() throws SQLException {
//        if (checkInputPhong()) {
//            Phong phong = new Phong();
//            phong.setMaPhong(txtMaPhong.getText().trim());
//            for (int i = 0; i < listloai.size(); i++) {
//                if (cboLoai.getSelectedItem().toString().equals(listloai.get(i).getTenloai())) {
//                    phong.setMaLoai(listloai.get(i).getMaLoai());
//                    break;
//                }
//            }
//            phong.setTinhTrang(false);
//            new PhongDAO().insert(phong);
//            XuLy.popup("ok", this, "Thêm phòng thành công", "THÊM PHÒNG");
//            fillToTablePHONG();
//            clearPHONG();
//            tblRoom.clearSelection();
//        }
//    }

//    private void editPhong(String maphong) throws SQLException {
//        if (checkInputPhong()) {
//            Phong phong = new Phong();
//            phong.setMaPhong(txtMaPhong.getText().trim());
//            for (int i = 0; i < listloai.size(); i++) {
//                if (cboLoai.getSelectedItem().toString().equals(listloai.get(i).getTenloai())) {
//                    phong.setMaLoai(listloai.get(i).getMaLoai());
//                    break;
//                }
//
//            }
//            rs = JDBCHelper.executeQuery("SELECT tinhTrang FROM Phong WHERE maPhong = ?", maphong);
//            if (rs.next()) {
//                phong.setTinhTrang(rs.getBoolean("tinhTrang"));
//            }
//            new PhongDAO().update(phong, maphong);
//            XuLy.popup("ok", this, "Cập nhật thông tin phòng thành công", "THÊM PHÒNG");
//            fillToTablePHONG();
//            clearPHONG();
//            tblRoom.clearSelection();
//        }
//
//    }

//    private void removePhong() {
//        int[] forDel = tblRoom.getSelectedRows(); //lấy (các) index cần xóa bỏ vào mảng
//        if (forDel.length == 0) {
//            XuLy.popup("loi", this, "Chưa có phòng nào được chọn", "LỖI");
//        } else {
//            try {
//                int ask = XuLy.ask(this, "XÓA CÁC PHÒNG VỪA CHỌN?", "XÓA");
//
//                if (ask == 0) {
//                    for (int i = forDel.length - 1; i >= 0; i--) { //xóa ngược để khắc phục tính di động của chỉ số arraylist
//                        deletePhong(tblRoom.getValueAt(forDel[i], 1).toString());
//                    }
//                    XuLy.popup("ok", this, "Đã xóa thành công", "XÓA PHÒNG");
//                } else {
//                }
//            } catch (Exception e) {
//            }
//
//        }
//
//    }
//
//    private void deletePhong(String maPhong) {
//        new PhongDAO().delete(maPhong);
//        //XuLy.popup("ok", this, "Đã xóa phòng " + maPhong, "XÓA PHÒNG");
//        fillToTablePHONG();
//        clearPHONG();
//
//    }

//    private boolean checkInputLoai() throws SQLException {
//        if (txtMaLoai.getText().trim().equals("")) {
//            XuLy.popup("loi", this, "Chưa nhập mã loại", "LỖI");
//            txtMaLoai.requestFocus();
//            return false;
//        }
//        if (txtMaLoai.getText().length() > 10) {
//            XuLy.popup("loi", this, "Mã loại tối đa 10 kí tự", "LỖI");
//            txtMaLoai.requestFocus();
//            return false;
//        }
//        if (txtTenLoai.getText().trim().equals("")) {
//            XuLy.popup("loi", this, "Chưa nhập tên loại", "LỖI");
//            txtTenLoai.requestFocus();
//            return false;
//        }
//        if (!txtGiaPhong.getText().trim().matches("//d+")) {
//            XuLy.popup("loi", this, "Giá phòng không hợp lệ", "LỖI");
//            txtGiaPhong.requestFocus();
//            return false;
//        }
//        if (txtGiaPhong.getText().trim().equals("")) {
//            XuLy.popup("loi", this, "Chưa nhập giá phòng", "LỖI");
//            txtGiaPhong.requestFocus();
//            return false;
//        }
//        if (btnThemLOAI.getText().equals("Thêm")) {
//            rs = JDBCHelper.executeQuery("SELECT * FROM LoaiPhong WHERE maLoai = ?", txtMaLoai.getText());
//            if (rs.next()) {
//                XuLy.popup("loi", this, "Đã tồn tại mã loại " + txtMaLoai.getText(), "LỖI");
//                txtMaLoai.requestFocus();
//                return false;
//            }
//        }
//        if (btnThemLOAI.getText().equals("Cập nhật")) { //Kiểm tra tồn tại username (Loại trường hợp không thay đổi username
//            rs = JDBCHelper.executeQuery("SELECT * FROM LoaiPhong");
//            while (rs.next()) {
//                if (rs.getString("maLoai").equals(txtMaLoai.getText()) && !tblLoai.getValueAt(indexLOAI, 1).toString().equals(txtMaLoai.getText())) {
//                    XuLy.popup("loi", this, "Đã tồn tại mã loại " + txtMaLoai.getText(), "LỖI");
//                    txtMaLoai.requestFocus();
//                    return false;
//                }
//            }
//        }
//        return true;
//    }
//
//    private void addLoai() throws SQLException {
//        if (checkInputLoai()) {
//            LoaiPhong loai = new LoaiPhong();
//            loai.setMaLoai(txtMaLoai.getText());
//            loai.setTenloai(txtTenLoai.getText());
//            loai.setGia(Long.parseLong(txtGiaPhong.getText()));
//            new LoaiPhongDAO().insert(loai);
//            XuLy.popup("ok", this, "Thêm loại phòng thành công", "XÓA PHÒNG");
//            fillToTableLOAI();
//            clearLOAI();
//            tblLoai.clearSelection();
//        }
//
//    }
//
//    private void editLoai(String maLoai) throws SQLException {
//        if (checkInputLoai()) {
//            LoaiPhong loai = new LoaiPhong();
//            loai.setMaLoai(txtMaLoai.getText());
//            loai.setTenloai(txtTenLoai.getText());
//            loai.setGia(Long.parseLong(txtGiaPhong.getText()));
//            new LoaiPhongDAO().update(loai, maLoai);
//            XuLy.popup("ok", this, "Cập nhật thông tin loại phòng thành công", "XÓA PHÒNG");
//            fillToTableLOAI();
//            clearLOAI();
//            tblLoai.clearSelection();
//        }
//
//    }
//
//    private void removeLoai() {
//        int[] forDel = tblLoai.getSelectedRows(); //lấy (các) index cần xóa bỏ vào mảng
//        if (forDel.length == 0) {
//            XuLy.popup("loi", this, "Chưa có loại phòng nào được chọn", "LỖI");
//        } else {
//            try {
//                int ask = XuLy.ask(this, "XÓA CÁC LOẠI PHÒNG VỪA CHỌN?", "XÓA");
//
//                if (ask == 0) {
//                    for (int i = forDel.length - 1; i >= 0; i--) { //xóa ngược để khắc phục tính di động của chỉ số arraylist
//                        deleteLoai(tblLoai.getValueAt(forDel[i], 1).toString());
//                    }
//                    XuLy.popup("ok", this, "Đã xóa thành công", "XÓA LOẠI");
//                } else {
//                }
//            } catch (Exception e) {
//            }
//
//        }
//
//    }
//
//    private void deleteLoai(String maLoai) {
//        new LoaiPhongDAO().delete(maLoai);
//        fillToTablePHONG(); //đổ lại table phòng (vì trường hợp xóa loại sẽ xóa các loại phòng tương ứng)
//        fillToTableLOAI();
//        clearLOAI();
//
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboLoai;
    private javax.swing.JLabel lblGiaPhong;
    private javax.swing.JLabel lblLoai;
    private javax.swing.JLabel lblLoaiPhong;
    private javax.swing.JLabel lblMaLoaiPhong;
    private javax.swing.JLabel lblMaPhong;
    private javax.swing.JLabel lblNewLOAI;
    private javax.swing.JLabel lblNewPHONG;
    private javax.swing.JLabel lblPhong;
    private javax.swing.JLabel lblTHEMLOAI;
    private javax.swing.JLabel lblTHEMPHONG;
    private javax.swing.JLabel lblTenLoaiPhong;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlButtons2;
    private javax.swing.JPanel pnlLoaiPhong;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPhong;
    private javax.swing.JPanel pnlSubmenu;
    private javax.swing.JPanel pnlThongtin;
    private javax.swing.JPanel pnlThongtin2;
    private javax.swing.JScrollPane scrTable;
    private javax.swing.JScrollPane scrTable2;
    private javax.swing.JTable tblLOAI;
    private javax.swing.JTable tblPHONG;
    private javax.swing.JTextField txtGiaPhong;
    private javax.swing.JTextField txtMaLoaiPhong;
    private javax.swing.JTextField txtMaPhong;
    private javax.swing.JTextField txtTenLoaiPhong;
    // End of variables declaration//GEN-END:variables
}
